{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","calc","setCalc","result","setResult","ops","updateCalc","value","includes","slice","eval","Calculate","toString","deleteLast","clearAll","digitsButton","i","push","onClick","id","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"82BAGA,SAASA,MAuCP,IArCA,cAAwBC,oDAAS,IAAjC,sNAAOC,KAAP,cAAaC,QAAb,cACA,WAA4BF,oDAAS,IAArC,uNAAOG,OAAP,cAAeC,UAAf,cAEMC,IAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAE3BC,WAAa,SAAbA,WAAaC,OAEdF,IAAIG,SAASD,QAAmB,KAATN,MACvBI,IAAIG,SAASD,QAAUF,IAAIG,SAASP,KAAKQ,OAAO,MAK9CJ,IAAIG,SAASD,QAChBH,UAAUM,KAAKT,KAAKM,QAGtBL,QAAQD,KAAKM,SAGTI,UAAY,SAAZA,YACJT,QAAQQ,KAAKT,MAAMW,aAGfC,WAAa,WACjB,GAAa,KAATZ,KAAa,CACf,IAAMM,EAAQN,KAAKQ,MAAM,GAAI,GAC7BP,QAAQK,KAINO,SAAW,WACfZ,QAAQ,IACRE,UAAU,KAGNW,aAAe,GAtCR,eAuCLC,GACND,aAAaE,KAAK,qEAAQC,QAAS,kBAAMZ,WAAWU,EAAEJ,aAAaO,GAAIH,EAArD,SAAyDA,MADrEA,EAAE,EAAGA,EAAE,GAAIA,IAAK,MAAhBA,GAIR,OACE,kEAAKI,UAAU,MAAf,SACE,mEAAKA,UAAU,aAAf,UACE,mEAAKA,UAAU,SAAf,UACIjB,OAAS,kFAAQA,OAAR,WAAgC,GAD7C,IACmDF,MAAQ,KAG3D,mEAAKmB,UAAU,YAAf,UACE,qEAAQF,QAASJ,SAAjB,iBACA,qEAAQI,QAAS,kBAAMZ,WAAW,MAAlC,eACA,qEAAQY,QAAS,kBAAMZ,WAAW,MAAlC,eACA,qEAAQY,QAAS,kBAAMZ,WAAW,MAAlC,eACA,qEAAQY,QAAS,kBAAMZ,WAAW,MAAlC,eACA,qEAAQY,QAASL,WAAjB,oBAGF,mEAAKO,UAAU,SAAf,UACIL,aACF,qEAAQG,QAAS,kBAAMZ,WAAW,MAAlC,eACA,qEAAQY,QAAS,kBAAMZ,WAAW,MAAlC,eAEA,qEAAQY,QAASP,UAAWQ,GAAG,UAA/B,uBAOKpB,2B,gIC9DAsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACjC,EAAA,EAAD,MAEFkC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9e7c0170.chunk.js","sourcesContent":["import './App.css';\nimport { useState } from 'react';\n\nfunction App() {\n  \n  const [calc, setCalc] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n\n  const ops = ['/', '*', '+', '-', '.'];\n\n  const updateCalc = value => {\n    if (\n      (ops.includes(value) && calc === '') ||\n      (ops.includes(value) && ops.includes(calc.slice(-1)))\n    ) {\n      return;\n    }\n\n    if (!ops.includes(value)) {\n      setResult(eval(calc+value));\n    }\n\n    setCalc(calc+value);\n  }\n\n  const Calculate = () => {\n    setCalc(eval(calc).toString());\n  }\n\n  const deleteLast = () => {\n    if (calc !== \"\") {\n      const value = calc.slice(0, -1);\n      setCalc(value)\n    }\n  }\n\n  const clearAll = () => {\n    setCalc(\"\")\n    setResult(\"\")\n  }\n\n  const digitsButton = []\n  for(let i=1; i<10; i++){\n    digitsButton.push(<button onClick={() => updateCalc(i.toString())} id={i}>{i}</button>)\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"calculator\">\n        <div className=\"output\">\n          { result ? <span>({result})&nbsp;</span> : ''} { calc || 0}\n        </div>\n\n        <div className=\"operators\">\n          <button onClick={clearAll}>A/C</button>\n          <button onClick={() => updateCalc('/')}>/</button>\n          <button onClick={() => updateCalc('*')}>*</button>\n          <button onClick={() => updateCalc('-')}>-</button>\n          <button onClick={() => updateCalc('+')}>+</button>\n          <button onClick={deleteLast} >DEL</button>\n        </div>\n\n        <div className=\"digits\">\n          { digitsButton }\n          <button onClick={() => updateCalc('.')}>.</button>\n          <button onClick={() => updateCalc('0')}>0</button>\n          \n          <button onClick={Calculate} id=\"equalto\">=</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}